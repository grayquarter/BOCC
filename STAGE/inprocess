var SCRIPT_VERSION = 3.0

eval(getScriptText("INCLUDES_ACCELA_FUNCTIONS"));
eval(getScriptText("INCLUDES_ACCELA_FUNCTIONS_ASB"));
eval(getScriptText("INCLUDES_ACCELA_GLOBALS"));
eval(getScriptText("INCLUDES_CUSTOM"));
eval(getScriptText("INCLUDES_DPR_LIBRARY"));
eval(getScriptText("INCLUDES_DPR_CUSTOM"));

function getScriptText(vScriptName) {
    vScriptName = vScriptName.toUpperCase();
    var emseBiz = aa.proxyInvoker.newInstance("com.accela.aa.emse.emse.EMSEBusiness").getOutput();
    var emseScript = emseBiz.getMasterScript(aa.getServiceProviderCode(), vScriptName);
    return emseScript.getScriptText() + "";
}
showMessage = true;

try {

    showDebug = true;

    var recs = getRecsToProcess();

    for (var i in recs) {
        var map = recs[i];
        capId = aa.cap.getCapID(String(map.recordId)).getOutput();
        if (map.isStatus.equals(getTaskStatus(map.isTask))) {
            // replacing workflow
            logDebug("replacing workflow with " + map.newProcess + " for " + capId);
            var result = aa.workflow.deleteAndAssignWorkflow(capId, map.newProcess, false).getSuccess();
            logDebug("did it work? " + result);
            // setting inital status
            resultWorkflowTask("Intake Sufficiency Review", "Sufficient", "", "");
            // insert new tasks
            //adds tasks into workflow

            // test wf mapping
            var wfMap = getTaskMap();

            for (var i in wfMap) {
                // add by record type
                if (wfMap[i].Records.indexOf(String(map.recType)) >= 0) {
                    for (var j in wfMap[i].Tasks) {
                        logDebug("inserting " + wfMap[i].Tasks[j]);
                        if (!appMatch('Building/Trade Permits/*/*')) {
                            insertTask("Building Plans Review", wfMap[i].Tasks[j], "P");
                        }

                        if (appMatch('Building/Trade Permits/*/*')) {
                            insertTask("Electrical Plans Review", wfMap[i].Tasks[j], "P");
                        }
                    }
                }

            }
            // end test wf mapping
        }
    }
}
catch (err) {
    logDebug("A JavaScript Error occurred: " + err.message);
}
// end user code
aa.env.setValue("ScriptReturnCode", "1"); aa.env.setValue("ScriptReturnMessage", debug)
function getTaskStatus(stask) {
    try {
        // returns a string of task statuses for a workflow group

        var returnStr = ""
        var taskResult = aa.workflow.getTaskItems(capId, stask, null, null, null, null);

        if (taskResult.getSuccess()) {
            var taskArr = taskResult.getOutput();
        } else {
            logDebug("**ERROR: getting tasks : " + taskResult.getErrorMessage());
            return false
        }

        for (xx in taskArr) {
            if (taskArr[xx].getTaskDescription().equals(stask)) {
                return taskArr[xx].getDisposition();
            }

        }
    } catch (err) {
        logDebug("An error occurred in custom function getTaskStatus: " + err.message + " in line: " + err.lineNumber);
    }
}

function getRecsToProcess() {

    return [
        {
            "isTask": "Intake / Sufficiency Review",
            "isStatus": "Sufficient - Online Application",
            "recordId": "20200306199",
            "newStatus": "Under Review",
            "recType": "Building/Accessories/Residential/Canopy",
            "newProcess": "WF-BLD-ACC"
        },
        {
            "isTask": "Intake / Sufficiency Review",
            "isStatus": "Sufficient - Online Application",
            "recordId": "20200306208",
            "newStatus": "Under Review",
            "recType": "Building/Accessories/Residential/Canopy",
            "newProcess": "WF-BLD-ACC"
        } 
    ];
}
function resultWorkflowTask(wfstr, wfstat, wfcomment, wfnote) // optional process name
{
    var useProcess = false;
    var processName = "";
    if (arguments.length == 5) {
        processName = arguments[4]; // subprocess
        useProcess = true;
    }

    var workflowResult = aa.workflow.getTaskItems(capId, wfstr, processName, null, null, null);
    if (workflowResult.getSuccess())
        var wfObj = workflowResult.getOutput();
    else {
        logMessage("**ERROR: Failed to get workflow object: " + workflowResult.getErrorMessage());
        return false;
    }

    if (!wfstat)
        wfstat = "NA";

    for (i in wfObj) {
        var fTask = wfObj[i];
        if (fTask.getTaskDescription().toUpperCase().equals(wfstr.toUpperCase()) && (!useProcess || fTask.getProcessCode().equals(processName))) {
            var statObj = aa.workflow.getTaskStatus(fTask, wfstat);
            var dispo = "U";
            if (statObj.getSuccess()) {
                var status = statObj.getOutput();
                dispo = status.getResultAction();
            } else {
                logDebug("Could not get status action resulting to no change")
            }

            var dispositionDate = aa.date.getCurrentDate();
            var stepnumber = fTask.getStepNumber();
            var processID = fTask.getProcessID();

            if (useProcess)
                aa.workflow.handleDisposition(capId, stepnumber, processID, wfstat, dispositionDate, wfnote, wfcomment, systemUserObj, dispo);
            else
                aa.workflow.handleDisposition(capId, stepnumber, wfstat, dispositionDate, wfnote, wfcomment, systemUserObj, dispo);

            logMessage("Resulting Workflow Task: " + wfstr + " with status " + wfstat);
            logDebug("Resulting Workflow Task: " + wfstr + " with status " + wfstat);
        }
    }
}
